name: Publish to PyPI

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  test:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # For setuptools-scm
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        brew install ffmpeg portaudio
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv .venv
        uv pip install -e ".[dev]"
    
    - name: Lint with ruff
      run: |
        source .venv/bin/activate
        ruff check src/
    
    - name: Format with black
      run: |
        source .venv/bin/activate
        black --check src/
    
    - name: Type check with mypy (if configured)
      run: |
        source .venv/bin/activate
        # mypy src/  # Uncomment when mypy is configured
        echo "Type checking skipped - not yet configured"
    
    - name: Test package installation
      run: |
        source .venv/bin/activate
        python -c "import emuscribe; print(f'emuscribe v{emuscribe.__version__}')"
        emuscribe --help

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # For setuptools-scm
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-testpypi:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' || contains(github.ref, 'test')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/emuscribe
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  publish-pypi:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/emuscribe
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      # Remove password line to use trusted publishing
      # with:
      #   password: ${{ secrets.PYPI_API_TOKEN }}